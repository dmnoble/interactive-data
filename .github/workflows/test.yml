# main.py
import sys
from PyQt5.QtWidgets import QApplication
from gui import MainWindow
from data_manager import DataManager

if __name__ == "__main__":
    app = QApplication(sys.argv)
    data_manager = DataManager()
    main_window = MainWindow(data_manager)
    main_window.show()
    sys.exit(app.exec_())

# gui.py
from PyQt5.QtWidgets import QMainWindow, QPushButton, QVBoxLayout, QWidget, QComboBox, QLabel, QLineEdit
from config import load_config, save_config

class MainWindow(QMainWindow):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.setWindowTitle("Data Manager App")
        self.config = load_config()
        
        self.layout = QVBoxLayout()
        
        self.theme_label = QLabel("Select Theme:")
        self.theme_selector = QComboBox()
        self.theme_selector.addItems(["Light", "Dark"])
        self.theme_selector.setCurrentText("Dark" if self.config.get("dark_mode", False) else "Light")
        self.theme_selector.currentIndexChanged.connect(self.update_theme)
        
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search data...")
        self.search_box.textChanged.connect(self.search_data)
        
        self.button = QPushButton("Load Data")
        self.button.clicked.connect(self.load_data)
        
        self.layout.addWidget(self.theme_label)
        self.layout.addWidget(self.theme_selector)
        self.layout.addWidget(self.search_box)
        self.layout.addWidget(self.button)
        
        container = QWidget()
        container.setLayout(self.layout)
        self.setCentralWidget(container)
        
    def load_data(self):
        data = self.data_manager.load_data()
        print("Data Loaded:", data)
    
    def update_theme(self):
        self.config["dark_mode"] = self.theme_selector.currentText() == "Dark"
        save_config(self.config)
        print("Theme updated to:", self.theme_selector.currentText())
    
    def search_data(self):
        query = self.search_box.text()
        print("Searching for:", query)

# data_manager.py
import json

class DataManager:
    def __init__(self, file_path="data.json"):
        self.file_path = file_path
    
    def load_data(self):
        try:
            with open(self.file_path, "r") as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
    
    def save_data(self, data):
        with open(self.file_path, "w") as file:
            json.dump(data, file, indent=4)

    def backup_data(self, backup_path="backup.json"):
        data = self.load_data()
        with open(backup_path, "w") as file:
            json.dump(data, file, indent=4)
        print("Backup saved successfully.")

# config.py
import json

def load_config():
    try:
        with open("config.json", "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"dark_mode": False}

def save_config(config):
    with open("config.json", "w") as file:
        json.dump(config, file, indent=4)

# utils.py
def format_date(date_string):
    from datetime import datetime
    return datetime.strptime(date_string, "%Y-%m-%d").strftime("%B %d, %Y")

def multi_sort(data, sort_keys):
    return sorted(data, key=lambda x: tuple(x.get(k, "") for k in sort_keys))

# requirements.txt
PyQt5
pytest

# README.md
# Python Data Manager Project

## Features
- Load and save user data
- Configurable dark/light theme
- Search data
- Multi-level sorting
- Auto-save and backup

## Setup
```
pip install -r requirements.txt
python main.py
```

# .github/workflows/test.yml
name: Run Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest tests/
